{"created":"2024-04-15 13:30:34","title":"The Devil is in the Few Shots: Iterative Visual Knowledge Completion for Few-shot Learning","abstract":"Contrastive Language-Image Pre-training (CLIP) has shown powerful zero-shot learning performance. Few-shot learning aims to further enhance the transfer capability of CLIP by giving few images in each class, aka 'few shots'. Most existing methods either implicitly learn from the few shots by incorporating learnable prompts or adapters, or explicitly embed them in a cache model for inference. However, the narrow distribution of few shots often contains incomplete class information, leading to biased visual knowledge with high risk of misclassification. To tackle this problem, recent methods propose to supplement visual knowledge by generative models or extra databases, which can be costly and time-consuming. In this paper, we propose an Iterative Visual Knowledge CompLetion (KCL) method to complement visual knowledge by properly taking advantages of unlabeled samples without access to any auxiliary or synthetic data. Specifically, KCL first measures the similarities between unlabeled samples and each category. Then, the samples with top confidence to each category is selected and collected by a designed confidence criterion. Finally, the collected samples are treated as labeled ones and added to few shots to jointly re-estimate the remaining unlabeled ones. The above procedures will be repeated for a certain number of iterations with more and more samples being collected until convergence, ensuring a progressive and robust knowledge completion process. Extensive experiments on 11 benchmark datasets demonstrate the effectiveness and efficiency of KCL as a plug-and-play module under both few-shot and zero-shot learning settings. Code is available at https://github.com/Mark-Sky/KCL.","sentences":["Contrastive Language-Image Pre-training (CLIP) has shown powerful zero-shot learning performance.","Few-shot learning aims to further enhance the transfer capability of CLIP by giving few images in each class, aka 'few shots'.","Most existing methods either implicitly learn from the few shots by incorporating learnable prompts or adapters, or explicitly embed them in a cache model for inference.","However, the narrow distribution of few shots often contains incomplete class information, leading to biased visual knowledge with high risk of misclassification.","To tackle this problem, recent methods propose to supplement visual knowledge by generative models or extra databases, which can be costly and time-consuming.","In this paper, we propose an Iterative Visual Knowledge CompLetion (KCL) method to complement visual knowledge by properly taking advantages of unlabeled samples without access to any auxiliary or synthetic data.","Specifically, KCL first measures the similarities between unlabeled samples and each category.","Then, the samples with top confidence to each category is selected and collected by a designed confidence criterion.","Finally, the collected samples are treated as labeled ones and added to few shots to jointly re-estimate the remaining unlabeled ones.","The above procedures will be repeated for a certain number of iterations with more and more samples being collected until convergence, ensuring a progressive and robust knowledge completion process.","Extensive experiments on 11 benchmark datasets demonstrate the effectiveness and efficiency of KCL as a plug-and-play module under both few-shot and zero-shot learning settings.","Code is available at https://github.com/Mark-Sky/KCL."],"url":"http://arxiv.org/abs/2404.09778v1"}
{"created":"2024-04-15 13:17:33","title":"Improved methodology for longitudinal Web analytics using Common Crawl","abstract":"Common Crawl is a multi-petabyte longitudinal dataset containing over 100 billion web pages which is widely used as a source of language data for sequence model training and in web science research. Each of its constituent archives is on the order of 75TB in size. Using it for research, particularly longitudinal studies, which necessarily involve multiple archives, is therefore very expensive in terms of compute time and storage space and/or web bandwidth. Two new methods for mitigating this problem are presented here, based on exploiting and extending the much smaller (<200 gigabytes (GB) compressed) _index_ which is available for each archive. By adding Last-Modified timestamps to the index we enable longitudinal exploration using only a single archive. By comparing the distribution of index features for each of the 100 segments into which archive is divided with their distribution over the whole archive, we have identified the least and most representative segments for a number of recent archives. Using this allows the segment(s) that are most representative of an archive to be used as proxies for the whole. We illustrate this approach in an analysis of changes in URI length over time, leading to an unanticipated insight into the how the creation of Web pages has changed over time.","sentences":["Common Crawl is a multi-petabyte longitudinal dataset containing over 100 billion web pages which is widely used as a source of language data for sequence model training and in web science research.","Each of its constituent archives is on the order of 75TB in size.","Using it for research, particularly longitudinal studies, which necessarily involve multiple archives, is therefore very expensive in terms of compute time and storage space and/or web bandwidth.","Two new methods for mitigating this problem are presented here, based on exploiting and extending the much smaller (<200 gigabytes (GB) compressed) _index_ which is available for each archive.","By adding Last-Modified timestamps to the index we enable longitudinal exploration using only a single archive.","By comparing the distribution of index features for each of the 100 segments into which archive is divided with their distribution over the whole archive, we have identified the least and most representative segments for a number of recent archives.","Using this allows the segment(s) that are most representative of an archive to be used as proxies for the whole.","We illustrate this approach in an analysis of changes in URI length over time, leading to an unanticipated insight into the how the creation of Web pages has changed over time."],"url":"http://arxiv.org/abs/2404.09770v1"}
{"created":"2024-04-15 13:15:27","title":"Search-Space Reduction Via Essential Vertices Revisited: Vertex Multicut and Cograph Deletion","abstract":"For an optimization problem $\\Pi$ on graphs whose solutions are vertex sets, a vertex $v$ is called $c$-essential for $\\Pi$ if all solutions of size at most $c \\cdot OPT$ contain $v$. Recent work showed that polynomial-time algorithms to detect $c$-essential vertices can be used to reduce the search space of fixed-parameter tractable algorithms solving such problems parameterized by the size $k$ of the solution. We provide several new upper- and lower bounds for detecting essential vertices. For example, we give a polynomial-time algorithm for $3$-Essential detection for Vertex Multicut, which translates into an algorithm that finds a minimum multicut of an undirected $n$-vertex graph $G$ in time $2^{O(\\ell^3)} \\cdot n^{O(1)}$, where $\\ell$ is the number of vertices in an optimal solution that are not $3$-essential. Our positive results are obtained by analyzing the integrality gaps of certain linear programs. Our lower bounds show that for sufficiently small values of $c$, the detection task becomes NP-hard assuming the Unique Games Conjecture. For example, we show that ($2-\\varepsilon$)-Essential detection for Directed Feedback Vertex Set is NP-hard under this conjecture, thereby proving that the existing algorithm that detects $2$-essential vertices is best-possible.","sentences":["For an optimization problem $\\Pi$ on graphs whose solutions are vertex sets, a vertex $v$ is called $c$-essential for $\\Pi$ if all solutions of size at most $c \\cdot OPT$ contain $v$.","Recent work showed that polynomial-time algorithms to detect $c$-essential vertices can be used to reduce the search space of fixed-parameter tractable algorithms solving such problems parameterized by the size $k$ of the solution.","We provide several new upper- and lower bounds for detecting essential vertices.","For example, we give a polynomial-time algorithm for $3$-Essential detection for Vertex Multicut, which translates into an algorithm that finds a minimum multicut of an undirected $n$-vertex graph $G$ in time $2^{O(\\ell^3)} \\cdot n^{O(1)}$, where $\\ell$ is the number of vertices in an optimal solution that are not $3$-essential.","Our positive results are obtained by analyzing the integrality gaps of certain linear programs.","Our lower bounds show that for sufficiently small values of $c$, the detection task becomes NP-hard assuming the Unique Games Conjecture.","For example, we show that ($2-\\varepsilon$)-Essential detection for Directed Feedback Vertex Set is NP-hard under this conjecture, thereby proving that the existing algorithm that detects $2$-essential vertices is best-possible."],"url":"http://arxiv.org/abs/2404.09769v1"}
